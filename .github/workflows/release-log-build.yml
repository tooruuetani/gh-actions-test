name: log-build
run-name: Build log image for `${{ github.base_ref }}`
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - release/*/log

env:
  AWS_REGION: ap-northeast-1
  AWS_ROLE_ARN_DEV: arn:aws:iam::082954585471:role/rpf-infrastructure-role-dev
  AWS_ROLE_ARN_STG: arn:aws:iam::637423178195:role/rpf-infrastructure-role-stg
  AWS_ROLE_ARN_PROD: arn:aws:iam::315671498329:role/rpf-infrastructure-role-prod

jobs:
  build_image:
    env:
      REPO: rpf-log-dev
      WORKDIR_DOCKER: log/
    permissions: write-all
    runs-on: ubuntu-latest
    if: startsWith(github.base_ref, 'release/dev/log')
    defaults:
      run:
        working-directory: log/
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN_DEV }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Get SHA
        id: get-sha
        uses: ./.github/actions/get-sha
      - name: build docker
        continue-on-error: true
        run: |
          docker-compose -f docker-compose.yml -f docker-compose-test.yml up -d
          until curl -XGET "https://localhost:9200" --insecure > /dev/null; do sleep 1; done
          sleep 10  # 起動後のイニシャライズまち
      - name: test docker
        run: |
          docker-compose -f docker-compose.yml -f docker-compose-test.yml  run --rm --entrypoint "pytest" log_app
          docker-compose -f docker-compose.yml -f docker-compose-test.yml down
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Push image to Amazon ECR
        env:
          ECR: ${{ steps.login-ecr.outputs.registry }}
          REPO: ${{ env.REPO }}
          TAG: ${{ steps.get-sha.outputs.sha }}
        run: |
          docker tag log_app $ECR/$REPO:$TAG $CMD
          docker push $ECR/$REPO:$TAG

  confirm_dev:
    needs:
      - build_image
    if: startsWith(github.base_ref, 'release/dev/log')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Retrieve SHA from head branch name
        uses: ./.github/actions/release/context
        id: context
      - name: Confirm image
        uses: ./.github/actions/commons/ecr_confirm
        with:
          aws_region: ${{ env.AWS_REGION }}
          iam_role: ${{ env.AWS_ROLE_ARN_DEV }}
          repository_name: "rpf-log-lambda"
          tag: ${{ steps.context.outputs.sha }}


  confirm_stg:
    needs:
      - build_image
    if: always() && startsWith(github.base_ref, 'release/stg/log')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Retrieve SHA from head branch name
        uses: ./.github/actions/release/context
        id: context
      - name: Confirm image
        uses: ./.github/actions/commons/ecr_confirm
        with:
          aws_region: ${{ env.AWS_REGION }}
          iam_role: ${{ env.AWS_ROLE_ARN_STG }}
          repository_name: "rpf-log-lambda"
          tag: ${{ steps.context.outputs.sha }}

  confirm_prod:
    needs:
      - build_image
    if: always() && startsWith(github.base_ref, 'release/prod/log')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Retrieve SHA from head branch name
        uses: ./.github/actions/release/context
        id: context
      - name: Confirm image
        uses: ./.github/actions/commons/ecr_confirm
        with:
          aws_region: ${{ env.AWS_REGION }}
          iam_role: ${{ env.AWS_ROLE_ARN_PROD }}
          repository_name: "rpf-log-lambda"
          tag: ${{ steps.context.outputs.sha }}

  confirm_image_pushed:
    needs:
      - confirm_dev
      - confirm_stg
      - confirm_prod
    if: failure() == false && contains(needs.*.result, 'cancelled') == false
    runs-on: ubuntu-latest
    steps:
      - run: exit -1
        name: Fails if no confirmed image
        if: contains(needs.*.result, 'success') == false
      - run: echo "$json"
        env:
          json: ${{ toJSON(needs) }}
