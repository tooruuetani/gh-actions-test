name: preview-log-deploy
run-name: Deploying preview log for [${{ github.head_ref }}@${{ github.event.pull_request.head.sha }}]
on:
  pull_request:
    types:
      - labeled

env:
  AWS_REGION: ap-northeast-1
  AWS_ROLE: arn:aws:iam::082954585471:role/rpf-infrastructure-role-dev
  REPO: rpf-log-dev
  TF_BUCKET: rpf-terraform-state-dev

jobs:
  infrastructure:
    if: github.event.label.name == 'preview-log'
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      WORKDIR_DOCKER: log
      WORKDIR_TF: terraform/envs/preview/log
    outputs:
      sha: ${{ steps.context.outputs.sha }}
      stage: ${{ steps.context.outputs.stage }}
      version: ${{ steps.context.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Comment acceptance
        uses: ./.github/actions/preview/comment_start
        with:
          service_name: log
      - name: Get context for preview
        id: context
        uses: ./.github/actions/preview/context
      # TODO: イメージビルドを log_backend に移動
      - name: Build docker image, then upload to ECR
        uses: ./.github/actions/commons/ecr_upload
        with:
          aws_role: ${{ env.AWS_ROLE }}
          aws_region: ${{ env.AWS_REGION }}
          repository_name: ${{ env.REPO }}
          tag_local: ${{ steps.context.outputs.sha }}
          tag_remote: ${{ steps.context.outputs.sha }}
      - name: Tagging docker image
        uses: ./.github/actions/commons/ecr_tagging
        with:
          repository_name: ${{ env.REPO }}
          tag_origin: ${{ steps.context.outputs.sha }}
          tag_release: ${{ steps.context.outputs.stage }}
      - uses: ./.github/actions/commons/terraform_install
        with:
          args_init: -backend-config=backend-feature.tfvars -backend-config="key=${{ steps.context.outputs.stage }}.tfstate"
          aws_region: ${{ env.AWS_REGION }}
          aws_role: ${{ env.AWS_ROLE }}
          dir: terraform/envs/preview/log
      - uses: ./.github/actions/commons/terraform_apply
        with:
          args_apply: -var "stage=${{ steps.context.outputs.stage }}"
          dir: terraform/envs/preview/log
      - uses: ./.github/actions/preview/label_add # 削除が必要になるため、インフラのデプロイが成功したらラベルを追加
        with:
          name: preview-log-deployed

  log_backend:
    needs: [infrastructure]
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      SHA: ${{ needs.infrastructure.outputs.sha }}
      STAGE: ${{ needs.infrastructure.outputs.stage }}
      VERSION: ${{ needs.infrastructure.outputs.version }}
      WORKDIR: log/backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.REGION }}
      - name: Update lambda function env values
        uses: ./.github/actions/commons/lambroll_update_env
        with:
          dir: "${{ env.WORKDIR }}/lambroll"
          repository_name: "${{ env.REPO }}" # [TODO] プレビュー環境のリポジトリ名を指定
          stage: ${{ env.STAGE }}
          tag: ${{ env.SHA }}
      - name: Update lambda functions
        uses: ./.github/actions/commons/lambroll_deploy
        with:
          dir: "${{ env.WORKDIR }}/lambroll"
          function_names: "A01 A02 A03"
          lambroll_alias: ${{ env.STAGE }}
          lambroll_envfile: "${{ env.STAGE }}.env"
          tfstate_url: "s3://${{ env.TF_BUCKET }}/${{ env.STAGE }}.tfstate"

  cleanup:
    needs: [infrastructure, log_backend]
    if: always() && github.event.label.name == 'preview-log'
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - if: contains(needs.*.result, 'failure')
        uses: ./.github/actions/preview/comment_deploy_failed
      - uses: ./.github/actions/preview/label_remove
        with:
          name: preview-log

  finish:
    needs: [infrastructure, log_backend]
    if: failure() == false && contains(needs.*.result, 'cancelled') == false && github.event.label.name == 'preview-log'
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Comment completed
        uses: actions/github-script@v7
        env:
          ACTOR: ${{ github.actor }}
          SHA: ${{ needs.infrastructure.outputs.sha }}
        with:
          script: |
            const { ACTOR, SHA } = process.env
            msg = [
              `@${ACTOR} Deploying preview@${SHA} has completed.`,
            ].join("\n")
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: msg,
            })
